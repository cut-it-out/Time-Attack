//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/_Project/Scripts/Input/GameInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameInput"",
    ""maps"": [
        {
            ""name"": ""GamePlay"",
            ""id"": ""f8addc51-42a4-4fdd-ac1c-3efa86e691ba"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""ba5949d6-3666-4c68-bf36-00e8eee1ee2c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PauseMenuActivation"",
                    ""type"": ""Button"",
                    ""id"": ""c3ca5cea-f47d-4a40-9928-044cca3f0f2b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""StartGameWithSpace"",
                    ""type"": ""Button"",
                    ""id"": ""36814d78-1c63-4361-8d33-3215ff09a04a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""AnyKeyPress"",
                    ""type"": ""Button"",
                    ""id"": ""7d8c3ec5-546c-4085-818b-f310085acdd7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""69168be8-b49d-4505-8e4d-a94d7c391d6d"",
                    ""path"": ""2DVector"",
                    ""interactions"": ""Press(behavior=2)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""944d2de1-5bba-4d55-866b-3ea1e65def66"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""d3ced35d-0c05-48af-8aa9-61978b035145"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""d2e1d76d-8065-46f7-b2c5-25fa7597b389"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""bd46c926-06f7-4516-a155-6d312e3a06af"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""24f6bf21-864e-4581-af45-01cea5f54721"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PauseMenuActivation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""becad620-7604-42d4-a908-dd253292b499"",
                    ""path"": ""<Keyboard>/anyKey"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AnyKeyPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1e157b93-f806-4915-8912-109ffbb53d42"",
                    ""path"": ""<Mouse>/press"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AnyKeyPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""556fe1d2-6502-41ab-a80b-fc6c0675a31d"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StartGameWithSpace"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // GamePlay
        m_GamePlay = asset.FindActionMap("GamePlay", throwIfNotFound: true);
        m_GamePlay_Movement = m_GamePlay.FindAction("Movement", throwIfNotFound: true);
        m_GamePlay_PauseMenuActivation = m_GamePlay.FindAction("PauseMenuActivation", throwIfNotFound: true);
        m_GamePlay_StartGameWithSpace = m_GamePlay.FindAction("StartGameWithSpace", throwIfNotFound: true);
        m_GamePlay_AnyKeyPress = m_GamePlay.FindAction("AnyKeyPress", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // GamePlay
    private readonly InputActionMap m_GamePlay;
    private IGamePlayActions m_GamePlayActionsCallbackInterface;
    private readonly InputAction m_GamePlay_Movement;
    private readonly InputAction m_GamePlay_PauseMenuActivation;
    private readonly InputAction m_GamePlay_StartGameWithSpace;
    private readonly InputAction m_GamePlay_AnyKeyPress;
    public struct GamePlayActions
    {
        private @GameInput m_Wrapper;
        public GamePlayActions(@GameInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_GamePlay_Movement;
        public InputAction @PauseMenuActivation => m_Wrapper.m_GamePlay_PauseMenuActivation;
        public InputAction @StartGameWithSpace => m_Wrapper.m_GamePlay_StartGameWithSpace;
        public InputAction @AnyKeyPress => m_Wrapper.m_GamePlay_AnyKeyPress;
        public InputActionMap Get() { return m_Wrapper.m_GamePlay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GamePlayActions set) { return set.Get(); }
        public void SetCallbacks(IGamePlayActions instance)
        {
            if (m_Wrapper.m_GamePlayActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnMovement;
                @PauseMenuActivation.started -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnPauseMenuActivation;
                @PauseMenuActivation.performed -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnPauseMenuActivation;
                @PauseMenuActivation.canceled -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnPauseMenuActivation;
                @StartGameWithSpace.started -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnStartGameWithSpace;
                @StartGameWithSpace.performed -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnStartGameWithSpace;
                @StartGameWithSpace.canceled -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnStartGameWithSpace;
                @AnyKeyPress.started -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnAnyKeyPress;
                @AnyKeyPress.performed -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnAnyKeyPress;
                @AnyKeyPress.canceled -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnAnyKeyPress;
            }
            m_Wrapper.m_GamePlayActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @PauseMenuActivation.started += instance.OnPauseMenuActivation;
                @PauseMenuActivation.performed += instance.OnPauseMenuActivation;
                @PauseMenuActivation.canceled += instance.OnPauseMenuActivation;
                @StartGameWithSpace.started += instance.OnStartGameWithSpace;
                @StartGameWithSpace.performed += instance.OnStartGameWithSpace;
                @StartGameWithSpace.canceled += instance.OnStartGameWithSpace;
                @AnyKeyPress.started += instance.OnAnyKeyPress;
                @AnyKeyPress.performed += instance.OnAnyKeyPress;
                @AnyKeyPress.canceled += instance.OnAnyKeyPress;
            }
        }
    }
    public GamePlayActions @GamePlay => new GamePlayActions(this);
    public interface IGamePlayActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnPauseMenuActivation(InputAction.CallbackContext context);
        void OnStartGameWithSpace(InputAction.CallbackContext context);
        void OnAnyKeyPress(InputAction.CallbackContext context);
    }
}
